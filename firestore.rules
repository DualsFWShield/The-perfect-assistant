rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fonction pour vérifier si l'utilisateur est autorisé
    function isAuthorizedUser() {
      return request.auth != null && 
             request.auth.token.email == get(/databases/$(database)/documents/config/allowed_user).data.email;
    }

    // Configuration accessible uniquement à l'utilisateur autorisé
    match /config/{docId} {
      allow read, write: if isAuthorizedUser();
    }

    // Collection utilisateurs
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Sous-collections de l'utilisateur
      match /{collection}/{docId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Collection emails
    match /emails/{emailId} {
      allow read, write: if isAuthorizedUser() && 
                          resource.data.userEmail == request.auth.token.email;
    }

    // Collection événements
    match /events/{eventId} {
      allow read, write: if isAuthorizedUser() && 
                          resource.data.userEmail == request.auth.token.email;
    }

    // Collection commandes vocales
    match /voiceCommands/{commandId} {
      allow read, write: if isAuthorizedUser() && 
                          resource.data.userEmail == request.auth.token.email;
    }

    // Collection préférences
    match /preferences/{prefId} {
      allow read, write: if isAuthorizedUser() && 
                          resource.data.userEmail == request.auth.token.email;
    }

    // Collection logs d'audit
    match /auditLogs/{logId} {
      allow read: if isAuthorizedUser();
      allow write: if false;  // Logs en lecture seule
    }

    // Bloquer tout autre accès
    match /{document=**} {
      allow read, write: if false;
    }
  }
}